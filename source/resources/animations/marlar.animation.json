{
	"format_version": "1.8.0",
	"animations": {
		"animation.marlar.attack.rotations": {
			"loop": true,
			"bones": {
				"body": {
					"rotation": [0, "(math.sin(math.sqrt(variable.attack_time) * 360) * 11.46) - this", 0]
				},
				"leftarm": {
					"rotation": ["(math.sin(math.sqrt(variable.attack_time) * 360) * 11.46)", 0, 0]
				},
				"rightarm": {
					"rotation": ["math.sin(1.0 - math.pow(1.0 - variable.attack_time, 3.0) * 180.0) * (variable.is_brandishing_spear ? -1.0 : 1.0 )", "variable.is_brandishing_spear ? 0.0 : (math.sin(math.sqrt(variable.attack_time) * 360) * 11.46) * 2.0", 0]
				}
			}
		},
		"animation.marlar.big_head": {
			"loop": true,
			"bones": {
				"hat": {
					"scale": 1.4
				},
				"head": {
					"scale": 1.4
				}
			}
		},
		"animation.marlar.base_pose": {
			"loop": true,
			"bones": {
				"head": {
					"rotation": [0, "-this", 0]
				},
				"leftArm": {
					"rotation": ["-this", "-this", "-this"],
					"position": ["5.0 - this", 0, "-this"]
				},
				"leftLeg": {
					"rotation": ["-this", "-this", 0]
				},
				"rightArm": {
					"rotation": ["-this", "-this", "-this"],
					"position": ["-5.0 - this", 0, "-this"]
				},
				"rightLeg": {
					"rotation": ["-this", "-this", 0]
				},
				"waist": {
					"rotation": ["-this", "-this", "-this"]
				}
			}
		},
		"animation.marlar.bob": {
			"loop": true,
			"bones": {
				"leftarm": {
					"rotation": [0, 0, "-(math.cos(query.life_time * 103.2) * 2.865) - 2.865"]
				},
				"rightarm": {
					"rotation": [0, 0, "(math.cos(query.life_time * 103.2) * 2.865) + 2.865"]
				}
			}
		},
		"animation.marlar.bow_and_arrow": {
			"loop": true,
			"bones": {
				"leftArm": {
					"rotation": ["query.target_x_rotation - 8.0 - math.sin(query.life_time * 76.8) * 2.865 - this", "query.target_y_rotation + 18.65", "-(math.cos(query.life_time * 103.2) * 2.865) - 2.865"]
				},
				"rightArm": {
					"rotation": ["query.target_x_rotation - 83.0 + math.sin(query.life_time * 76.8) * 2.865 - this", "query.target_y_rotation - 5.73", "(math.cos(query.life_time * 103.2) * 2.865) + 2.865"]
				},
				"body": {
					"rotation": [0, 0, 0]
				}
			}
		},
		"animation.marlar.brandish_spear": {
			"loop": true,
			"bones": {
				"rightarm": {
					"rotation": ["this * -0.5 - 157.5 - 22.5 * variable.charge_amount", "-this - (math.sin(math.sqrt(variable.attack_time) * 360) * 11.46)", 0]
				}
			}
		},
		"animation.marlar.charging": {
			"loop": true,
			"bones": {
				"rightarm": {
					"rotation": ["22.5 * variable.charge_amount - this", "-this", 0]
				}
			}
		},
		"animation.marlar.damage_nearby_mobs": {
			"loop": true,
			"override_previous_animation": true,
			"bones": {
				"leftarm": {
					"rotation": [-45, 0, 0]
				},
				"leftleg": {
					"rotation": [45, 0, 0]
				},
				"rightarm": {
					"rotation": [45, 0, 0]
				},
				"rightleg": {
					"rotation": [-45, 0, 0]
				}
			}
		},
		"animation.marlar.holding": {
			"loop": true,
			"bones": {
				"leftarm": {
					"rotation": ["variable.is_holding_left ? (-this * 0.5 - 18.0) : 0.0", 0, 0]
				},
				"rightarm": {
					"rotation": ["variable.is_holding_right ? (-this * 0.5 - 18.0) : 0.0", 0, 0]
				}
			}
		},
		"animation.marlar.look_at_target.default": {
			"loop": true,
			"bones": {
				"hat": {
					"rotation": ["query.target_x_rotation", "query.target_y_rotation", 0]
				},
				"head": {
					"rotation": ["query.target_x_rotation", "query.target_y_rotation", 0]
				}
			}
		},
		"animation.marlar.look_at_target.gliding": {
			"loop": true,
			"bones": {
				"hat": {
					"rotation": [-45, "query.target_y_rotation", 0]
				},
				"head": {
					"rotation": [-45, "query.target_y_rotation", 0]
				}
			}
		},
		"animation.marlar.look_at_target.swimming": {
			"loop": true,
			"bones": {
				"hat": {
					"rotation": ["math.lerp(query.target_x_rotation, -45.0, variable.swim_amount)", "query.target_y_rotation", 0]
				},
				"head": {
					"rotation": ["math.lerp(query.target_x_rotation, -45.0, variable.swim_amount)", "query.target_y_rotation", 0]
				}
			}
		},
		"animation.marlar.move": {
			"loop": true,
			"bones": {
				"leftarm": {
					"rotation": ["variable.tcos0", 0, 0]
				},
				"leftleg": {
					"rotation": ["variable.tcos0 * -1.4", 0, 0]
				},
				"rightarm": {
					"rotation": ["-variable.tcos0", 0, 0]
				},
				"rightleg": {
					"rotation": ["variable.tcos0 * 1.4", 0, 0]
				}
			}
		},
		"animation.marlar.riding.arms": {
			"loop": true,
			"bones": {
				"leftarm": {
					"rotation": [-36, 0, 0]
				},
				"rightarm": {
					"rotation": [-36, 0, 0]
				}
			}
		},
		"animation.marlar.riding.legs": {
			"loop": true,
			"override_previous_animation": true,
			"bones": {
				"leftleg": {
					"rotation": [-72, -18, 0]
				},
				"rightleg": {
					"rotation": [-72, 18, 0]
				}
			}
		},
		"animation.marlar.sneaking": {
			"loop": true,
			"bones": {
				"body": {
					"rotation": ["0.5 - this", 0, 0]
				},
				"head": {
					"position": [0, 1, 0]
				},
				"leftarm": {
					"rotation": [72, 0, 0]
				},
				"leftleg": {
					"position": [0, -3, 4]
				},
				"rightarm": {
					"rotation": [72, 0, 0]
				},
				"rightleg": {
					"position": [0, -3, 4]
				}
			}
		},
		"animation.marlar.swimming": {
			"animation_length": 1.3,
			"loop": true,
			"bones": {
				"leftarm": {
					"rotation": {
						"0.7": {
							"post": ["math.lerp(this, 11.25 * math.mod(query.modified_distance_moved, 26.0), variable.left_arm_swim_amount)", "math.lerp(this, 180.0, variable.left_arm_swim_amount)", "math.lerp(this, 72.77 + 13.4 * math.mod(query.modified_distance_moved, 26.0), variable.left_arm_swim_amount)"],
							"pre": ["math.lerp(this, 0.0, variable.left_arm_swim_amount)", "math.lerp(this, 180.0, variable.left_arm_swim_amount)", "math.lerp(this, 180.0 - 0.01877 * (-65.0 * math.mod(query.modified_distance_moved, 26.0) + math.mod(query.modified_distance_moved, 26.0) * math.mod(query.modified_distance_moved, 26.0)), variable.left_arm_swim_amount)"]
						},
						"1.1": ["math.lerp(this, 11.25 * math.mod(query.modified_distance_moved, 26.0), variable.left_arm_swim_amount)", "math.lerp(this, 180.0, variable.left_arm_swim_amount)", "math.lerp(this, 72.77 + 13.4 * math.mod(query.modified_distance_moved, 26.0), variable.left_arm_swim_amount)"],
						"1.3": {
							"post": ["math.lerp(this, 90.0 - (22.5 * math.mod(query.modified_distance_moved, 26.0)), variable.left_arm_swim_amount)", "math.lerp(this, 180.0, variable.left_arm_swim_amount)", "math.lerp(this, 180.0, variable.left_arm_swim_amount)"],
							"pre": ["math.lerp(this, 11.25 * math.mod(query.modified_distance_moved, 26.0), variable.left_arm_swim_amount)", "math.lerp(this, 180.0, variable.left_arm_swim_amount)", "math.lerp(this, 72.77 + 13.4 * math.mod(query.modified_distance_moved, 26.0), variable.left_arm_swim_amount)"]
						}
					}
				},
				"leftleg": {
					"rotation": ["math.lerp(this, math.cos(query.modified_distance_moved * 19.5 + 180.0) * 17.2, variable.left_arm_swim_amount)", 0, 0]
				},
				"rightarm": {
					"rotation": {
						"0.7": {
							"post": ["math.lerp(this, 11.25 * math.mod(query.modified_distance_moved, 26.0), variable.right_arm_swim_amount)", "math.lerp(this, 180.0, variable.right_arm_swim_amount)", "math.lerp(this, 72.77 + 13.4 * math.mod(query.modified_distance_moved, 26.0), variable.right_arm_swim_amount)"],
							"pre": ["math.lerp(this, 0.0, variable.right_arm_swim_amount)", "math.lerp(this, 180.0, variable.right_arm_swim_amount)", "math.lerp(this, -0.1019 * (-65.0 * math.mod(query.modified_distance_moved, 26.0) + math.mod(query.modified_distance_moved, 26.0) * math.mod(query.modified_distance_moved, 26.0)), variable.right_arm_swim_amount)"]
						},
						"1.1": ["math.lerp(this, 11.25 * math.mod(query.modified_distance_moved, 26.0), variable.right_arm_swim_amount)", "math.lerp(this, 180.0, variable.right_arm_swim_amount)", "math.lerp(this, 72.77 + 13.4 * math.mod(query.modified_distance_moved, 26.0), variable.right_arm_swim_amount)"],
						"1.3": {
							"post": ["math.lerp(this, 90.0 - (22.5 * math.mod(query.modified_distance_moved, 26.0)), variable.right_arm_swim_amount)", "math.lerp(this, 180.0, variable.right_arm_swim_amount)", "math.lerp(this, 180.0, variable.right_arm_swim_amount)"],
							"pre": ["math.lerp(this, 11.25 * math.mod(query.modified_distance_moved, 26.0), variable.right_arm_swim_amount)", "math.lerp(this, 180.0, variable.right_arm_swim_amount)", "math.lerp(this, 72.77 + 13.4 * math.mod(query.modified_distance_moved, 26.0), variable.right_arm_swim_amount)"]
						}
					}
				},
				"rightleg": {
					"rotation": ["math.lerp(this, math.cos(query.modified_distance_moved * 19.5) * 17.2, variable.left_arm_swim_amount)", 0, 0]
				}
			}
		},
		"animation.marlar.use_item_progress": {
			"loop": true,
			"bones": {
				"rightarm": {
					"rotation": ["variable.use_item_startup_progress * -60.0 + variable.use_item_interval_progress * 11.25", "variable.use_item_startup_progress * -22.5 + variable.use_item_interval_progress * 11.25", "variable.use_item_startup_progress * -5.625 + variable.use_item_interval_progress * 11.25"]
				}
			}
		},
		"animation.skeleton.attack": {
			"loop": true,
			"bones": {
				"leftarm": {
					"rotation": ["-68.75 * math.sin(variable.attack_time * 180.0) + 22.92 * (math.sin((1.0 - (1.0 - variable.attack_time) * (1.0 - variable.attack_time)) * 180.0) * 57.3)", "5.73 - math.sin(variable.attack_time * 180.0) * 34.38 - this", "-this"]
				},
				"rightarm": {
					"rotation": ["-68.75 * math.sin(variable.attack_time * 180.0) + 22.92 * (math.sin((1.0 - (1.0 - variable.attack_time) * (1.0 - variable.attack_time)) * 180.0) * 57.3)", "-5.73 + math.sin(variable.attack_time * 180.0) * 34.38 - this", "-this"]
				}
			}
		}
	}
}